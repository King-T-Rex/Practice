/*
Назначение:
    Определяет структуру узла двусвязного списка и объявляет функции для его управления.
    Подключается в main.c и list_utils.c для обеспечения согласованности типов и сигнатур.

Особенности:
    - Используется защита от повторного включения (#ifndef ... #endif).
    - Тип данных DataType позволяет легко изменить тип хранимых значений (например, на float или int).
*/

#ifndef LIST_UTILS_H
#define LIST_UTILS_H

#include <stdio.h>  // Для printf (в случае ошибок)

// Определяет тип данных, хранимый в узлах списка
typedef double DataType;

/*
Структура Node — узел двусвязного списка.

Поля:
    value — хранимое значение (число).
    prev  — указатель на предыдущий узел (NULL для первого узла).
    next  — указатель на следующий узел (NULL для последнего узла).
 */

typedef struct Node {
    DataType value;         // Значение, хранимое в узле
    struct Node* prev;      // Указатель на предыдущий узел
    struct Node* next;      // Указатель на следующий узел
} Node;

/*
Функция: create_node
Назначение: Создаёт новый узел списка в динамической памяти.
Параметры:
    value — значение, которое будет записано в узел.
Возвращает:
    Указатель на созданный узел. При неудаче — завершает программу с ошибкой.
*/
Node* create_node(DataType value);

/*
Функция: append
Назначение: Добавляет новый узел в конец списка.
Параметры:
    head — указатель на указатель головы списка (чтобы можно было изменить саму голову, если список был пуст).
    value — значение для нового узла.
Возвращает: ничего (void).
*/
void append(Node** head, DataType value);

/*
Функция: get_tail
Назначение: Возвращает указатель на последний узел списка.
Параметры:
    head — указатель на первый узел списка.
Возвращает:
    Указатель на последний узел, или NULL, если список пуст.
 */
Node* get_tail(Node* head);

/*
Функция: free_list
Назначение: Освобождает всю память, занятую списком.
Параметры:
    head — указатель на первый узел списка.
Возвращает: ничего (void).
Примечание: После вызова указатель head становится невалидным!
*/

void free_list(Node* head);

#endif // LIST_UTILS_H